"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _VariantType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _VariantTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_VariantType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    VAR_UNKNOWN: _VariantType.ValueType  # 0
    VAR_INT32: _VariantType.ValueType  # 1
    VAR_PRICE: _VariantType.ValueType  # 2
    VAR_DOUBLE: _VariantType.ValueType  # 3
    VAR_STRING: _VariantType.ValueType  # 4
class VariantType(_VariantType, metaclass=_VariantTypeEnumTypeWrapper):
    """Variant type is used to identify transported variant value
    Currently supported variant types: an int, a price, a double and a string
    Prices are encoded as a 64-bit int multiplied by 10�000�000
    """
    pass

VAR_UNKNOWN: VariantType.ValueType  # 0
VAR_INT32: VariantType.ValueType  # 1
VAR_PRICE: VariantType.ValueType  # 2
VAR_DOUBLE: VariantType.ValueType  # 3
VAR_STRING: VariantType.ValueType  # 4
global___VariantType = VariantType


class _RequestType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _RequestTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RequestType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    REQ_START_QUERY: _RequestType.ValueType  # 0
    REQ_STOP_QUERY: _RequestType.ValueType  # 1
    REQ_TABLE_UPDATE: _RequestType.ValueType  # 2
class RequestType(_RequestType, metaclass=_RequestTypeEnumTypeWrapper):
    """Request messages are passed from client->actant and are identified by RequestType enum"""
    pass

REQ_START_QUERY: RequestType.ValueType  # 0
REQ_STOP_QUERY: RequestType.ValueType  # 1
REQ_TABLE_UPDATE: RequestType.ValueType  # 2
global___RequestType = RequestType


class _ResponseType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ResponseTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ResponseType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RESP_START_QUERY: _ResponseType.ValueType  # 0
    RESP_STOP_QUERY: _ResponseType.ValueType  # 1
    UPDATE_TABLE: _ResponseType.ValueType  # 2
    RESP_TABLE_UPDATE: _ResponseType.ValueType  # 3
class ResponseType(_ResponseType, metaclass=_ResponseTypeEnumTypeWrapper):
    """Response messages are passed from actant->client and are identified by ResponseType enum"""
    pass

RESP_START_QUERY: ResponseType.ValueType  # 0
RESP_STOP_QUERY: ResponseType.ValueType  # 1
UPDATE_TABLE: ResponseType.ValueType  # 2
RESP_TABLE_UPDATE: ResponseType.ValueType  # 3
global___ResponseType = ResponseType


class VariantValue(google.protobuf.message.Message):
    """Variant value contains only one of the possible optional fields at any given time"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VARINT_FIELD_NUMBER: builtins.int
    VARPRICE_FIELD_NUMBER: builtins.int
    VARDOUBLE_FIELD_NUMBER: builtins.int
    VARSTRING_FIELD_NUMBER: builtins.int
    VARQUANTITY_FIELD_NUMBER: builtins.int
    varInt: builtins.int
    varPrice: builtins.int
    varDouble: builtins.float
    varString: typing.Text
    varQuantity: builtins.int
    def __init__(self,
        *,
        varInt: typing.Optional[builtins.int] = ...,
        varPrice: typing.Optional[builtins.int] = ...,
        varDouble: typing.Optional[builtins.float] = ...,
        varString: typing.Optional[typing.Text] = ...,
        varQuantity: typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["varDouble",b"varDouble","varInt",b"varInt","varPrice",b"varPrice","varQuantity",b"varQuantity","varString",b"varString"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["varDouble",b"varDouble","varInt",b"varInt","varPrice",b"varPrice","varQuantity",b"varQuantity","varString",b"varString"]) -> None: ...
global___VariantValue = VariantValue

class ColumnDescriptor(google.protobuf.message.Message):
    """Column descriptor contains the name of the actant field like THEORETICALS.DELTA or POSITION.DELTA
    followed by the type used for encoding that field, the variant type is not repeated for every row
    This information can be memorized for more optimal processing of the cells.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ISVECTOR_FIELD_NUMBER: builtins.int
    CANWRITE_FIELD_NUMBER: builtins.int
    ALIAS_FIELD_NUMBER: builtins.int
    name: typing.Text
    type: global___VariantType.ValueType
    isVector: builtins.bool
    canWrite: builtins.bool
    alias: typing.Text
    def __init__(self,
        *,
        name: typing.Optional[typing.Text] = ...,
        type: typing.Optional[global___VariantType.ValueType] = ...,
        isVector: typing.Optional[builtins.bool] = ...,
        canWrite: typing.Optional[builtins.bool] = ...,
        alias: typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["alias",b"alias","canWrite",b"canWrite","isVector",b"isVector","name",b"name","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias",b"alias","canWrite",b"canWrite","isVector",b"isVector","name",b"name","type",b"type"]) -> None: ...
global___ColumnDescriptor = ColumnDescriptor

class Cell(google.protobuf.message.Message):
    """A cell contains the number of the corresponding column (0-based) and the variant containing the value"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    COLUMNNUMBER_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    VALUEVECTOR_FIELD_NUMBER: builtins.int
    columnNumber: builtins.int
    @property
    def value(self) -> global___VariantValue: ...
    @property
    def valueVector(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VariantValue]: ...
    def __init__(self,
        *,
        columnNumber: typing.Optional[builtins.int] = ...,
        value: typing.Optional[global___VariantValue] = ...,
        valueVector: typing.Optional[typing.Iterable[global___VariantValue]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["columnNumber",b"columnNumber","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["columnNumber",b"columnNumber","value",b"value","valueVector",b"valueVector"]) -> None: ...
global___Cell = Cell

class Row(google.protobuf.message.Message):
    """A row contains a key string followed by a sparse sequence of cells. At least one cell is always
    being transferred.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    CONTEXTS_FIELD_NUMBER: builtins.int
    CELL_FIELD_NUMBER: builtins.int
    key: typing.Text
    contexts: typing.Text
    @property
    def cell(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Cell]: ...
    def __init__(self,
        *,
        key: typing.Optional[typing.Text] = ...,
        contexts: typing.Optional[typing.Text] = ...,
        cell: typing.Optional[typing.Iterable[global___Cell]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["contexts",b"contexts","key",b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cell",b"cell","contexts",b"contexts","key",b"key"]) -> None: ...
global___Row = Row

class TableUpdate(google.protobuf.message.Message):
    """Table update contains column descriptors followed by a sequence of rows.
    Only the initial update will contain column descriptors as well as full snapshot
    of all the rows.
    Subsequent updates will contain only changing rows and within them the changing cells.
    The client id has to be initialized when the table update is used in a request.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    COLUMNDESCRIPTOR_FIELD_NUMBER: builtins.int
    ROW_FIELD_NUMBER: builtins.int
    @property
    def columnDescriptor(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ColumnDescriptor]: ...
    @property
    def row(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Row]: ...
    def __init__(self,
        *,
        columnDescriptor: typing.Optional[typing.Iterable[global___ColumnDescriptor]] = ...,
        row: typing.Optional[typing.Iterable[global___Row]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["columnDescriptor",b"columnDescriptor","row",b"row"]) -> None: ...
global___TableUpdate = TableUpdate

class StartQuery(google.protobuf.message.Message):
    """Start query message contains
    - sequence of scope keys (see separate document for supported values)
    - sequence of field names (see separate document for supported values)
    - boolean whether the query is a one-time request that does not require
    a cancellation message
    - frequency specification expressed in milliseconds. Value of 0 means real-
    - subset of field names listed above that will not trigger an update when their value changes
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SCOPEKEY_FIELD_NUMBER: builtins.int
    FIELD_FIELD_NUMBER: builtins.int
    ONETIME_FIELD_NUMBER: builtins.int
    FREQUENCY_FIELD_NUMBER: builtins.int
    NOTRIGGER_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    @property
    def scopeKey(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    @property
    def field(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    oneTime: builtins.bool
    frequency: builtins.int
    @property
    def noTrigger(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    @property
    def context(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        scopeKey: typing.Optional[typing.Iterable[typing.Text]] = ...,
        field: typing.Optional[typing.Iterable[typing.Text]] = ...,
        oneTime: typing.Optional[builtins.bool] = ...,
        frequency: typing.Optional[builtins.int] = ...,
        noTrigger: typing.Optional[typing.Iterable[typing.Text]] = ...,
        context: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["frequency",b"frequency","oneTime",b"oneTime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["context",b"context","field",b"field","frequency",b"frequency","noTrigger",b"noTrigger","oneTime",b"oneTime","scopeKey",b"scopeKey"]) -> None: ...
global___StartQuery = StartQuery

class OperationStatus(google.protobuf.message.Message):
    """Operation status is passed from actant to client system and it describes the outcome of the
    requested operation identified by the clientId. A failure is identified by the existence
    of an error message
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ERRORMESSAGE_FIELD_NUMBER: builtins.int
    errorMessage: typing.Text
    def __init__(self,
        *,
        errorMessage: typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errorMessage",b"errorMessage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["errorMessage",b"errorMessage"]) -> None: ...
global___OperationStatus = OperationStatus

class Request(google.protobuf.message.Message):
    """Requests are passed from client system and will contain only one of the specific requests
    At the moment we support Start and Stop Query messages and Table Update to send data back
    to the application. The Stop Query doesn't have a request body.
    The clientId uniquely identifies the request within the client system, this number must be
    unique for each socket session established between actant and client software
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REQUESTTYPE_FIELD_NUMBER: builtins.int
    CLIENTID_FIELD_NUMBER: builtins.int
    STARTQUERY_FIELD_NUMBER: builtins.int
    TABLEUPDATE_FIELD_NUMBER: builtins.int
    requestType: global___RequestType.ValueType
    clientId: builtins.int
    @property
    def startQuery(self) -> global___StartQuery: ...
    @property
    def tableUpdate(self) -> global___TableUpdate: ...
    def __init__(self,
        *,
        requestType: typing.Optional[global___RequestType.ValueType] = ...,
        clientId: typing.Optional[builtins.int] = ...,
        startQuery: typing.Optional[global___StartQuery] = ...,
        tableUpdate: typing.Optional[global___TableUpdate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId",b"clientId","requestType",b"requestType","startQuery",b"startQuery","tableUpdate",b"tableUpdate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId",b"clientId","requestType",b"requestType","startQuery",b"startQuery","tableUpdate",b"tableUpdate"]) -> None: ...
global___Request = Request

class Response(google.protobuf.message.Message):
    """Responses are passed from actant system and will contain only one of the specific responses.
    At the moment we support Start and Stop Query response messages and Table Update
    The clientId received in the request is repeated in the response.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESPONSETYPE_FIELD_NUMBER: builtins.int
    CLIENTID_FIELD_NUMBER: builtins.int
    OPERATIONSTATUS_FIELD_NUMBER: builtins.int
    TABLEUPDATE_FIELD_NUMBER: builtins.int
    responseType: global___ResponseType.ValueType
    clientId: builtins.int
    @property
    def operationStatus(self) -> global___OperationStatus: ...
    @property
    def tableUpdate(self) -> global___TableUpdate: ...
    def __init__(self,
        *,
        responseType: typing.Optional[global___ResponseType.ValueType] = ...,
        clientId: typing.Optional[builtins.int] = ...,
        operationStatus: typing.Optional[global___OperationStatus] = ...,
        tableUpdate: typing.Optional[global___TableUpdate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId",b"clientId","operationStatus",b"operationStatus","responseType",b"responseType","tableUpdate",b"tableUpdate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId",b"clientId","operationStatus",b"operationStatus","responseType",b"responseType","tableUpdate",b"tableUpdate"]) -> None: ...
global___Response = Response
