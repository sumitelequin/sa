"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from . import ActStrategy_pb2
from . import ActTypes_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _RequestType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _RequestTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RequestType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    REQ_TRADE_ADD: _RequestType.ValueType  # 3
    REQ_TRADE_UPDATE: _RequestType.ValueType  # 4
    REQ_TRADE_DELETE: _RequestType.ValueType  # 5
    REQ_TRADE_MOVE: _RequestType.ValueType  # 7
    REQ_TRADE_DATA: _RequestType.ValueType  # 6
    REQ_CREATE_PORTFOLIO: _RequestType.ValueType  # 10
class RequestType(_RequestType, metaclass=_RequestTypeEnumTypeWrapper):
    """Request messages are passed from client->actant and are identified by RequestType enum"""
    pass

REQ_TRADE_ADD: RequestType.ValueType  # 3
REQ_TRADE_UPDATE: RequestType.ValueType  # 4
REQ_TRADE_DELETE: RequestType.ValueType  # 5
REQ_TRADE_MOVE: RequestType.ValueType  # 7
REQ_TRADE_DATA: RequestType.ValueType  # 6
REQ_CREATE_PORTFOLIO: RequestType.ValueType  # 10
global___RequestType = RequestType


class _ResponseType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ResponseTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ResponseType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RESP_ADD_TRADE: _ResponseType.ValueType  # 2
    RESP_UPDATE_TRADE: _ResponseType.ValueType  # 3
    RESP_DELETE_TRADE: _ResponseType.ValueType  # 4
    RESP_MOVE_TRADE: _ResponseType.ValueType  # 6
    RESP_TRADE_DATA: _ResponseType.ValueType  # 5
    RESP_CREATE_PORTFOLIO: _ResponseType.ValueType  # 7
class ResponseType(_ResponseType, metaclass=_ResponseTypeEnumTypeWrapper):
    """Response messages are passed from actant->client and are identified by ResponseType enum"""
    pass

RESP_ADD_TRADE: ResponseType.ValueType  # 2
RESP_UPDATE_TRADE: ResponseType.ValueType  # 3
RESP_DELETE_TRADE: ResponseType.ValueType  # 4
RESP_MOVE_TRADE: ResponseType.ValueType  # 6
RESP_TRADE_DATA: ResponseType.ValueType  # 5
RESP_CREATE_PORTFOLIO: ResponseType.ValueType  # 7
global___ResponseType = ResponseType


class TradeData(google.protobuf.message.Message):
    """The trade data contains all fields that a trade may contain"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INSTRUMENT_FIELD_NUMBER: builtins.int
    TRADEKEY_FIELD_NUMBER: builtins.int
    NEWIID_FIELD_NUMBER: builtins.int
    OLDIID_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    SCALEDQUANTITY_FIELD_NUMBER: builtins.int
    DECQUANTITY_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    FEE_FIELD_NUMBER: builtins.int
    COMMISSION_FIELD_NUMBER: builtins.int
    ACCOUNT_FIELD_NUMBER: builtins.int
    FREEFORM_FIELD_NUMBER: builtins.int
    MARKETUSER_FIELD_NUMBER: builtins.int
    MARKETMEMBER_FIELD_NUMBER: builtins.int
    PORTFOLIONAME_FIELD_NUMBER: builtins.int
    TRADENUMBER_FIELD_NUMBER: builtins.int
    BROKER_FIELD_NUMBER: builtins.int
    YESTERDAY_FIELD_NUMBER: builtins.int
    STRATEGYLEGS_FIELD_NUMBER: builtins.int
    instrument: typing.Text
    tradeKey: typing.Text
    newIId: typing.Text
    oldIId: typing.Text
    price: builtins.int
    scaledQuantity: builtins.int
    """	scaled quantity, will be deprecated"""

    decQuantity: builtins.int
    """	quantity with decimals"""

    side: typing.Text
    fee: builtins.float
    commission: builtins.float
    account: typing.Text
    freeForm: typing.Text
    marketUser: typing.Text
    marketMember: typing.Text
    portfolioName: typing.Text
    tradeNumber: typing.Text
    broker: typing.Text
    yesterday: builtins.bool
    @property
    def strategyLegs(self) -> ActStrategy_pb2.StrategyComposition:
        """	leg details for strategy trades"""
        pass
    def __init__(self,
        *,
        instrument: typing.Optional[typing.Text] = ...,
        tradeKey: typing.Optional[typing.Text] = ...,
        newIId: typing.Optional[typing.Text] = ...,
        oldIId: typing.Optional[typing.Text] = ...,
        price: typing.Optional[builtins.int] = ...,
        scaledQuantity: typing.Optional[builtins.int] = ...,
        decQuantity: typing.Optional[builtins.int] = ...,
        side: typing.Optional[typing.Text] = ...,
        fee: typing.Optional[builtins.float] = ...,
        commission: typing.Optional[builtins.float] = ...,
        account: typing.Optional[typing.Text] = ...,
        freeForm: typing.Optional[typing.Text] = ...,
        marketUser: typing.Optional[typing.Text] = ...,
        marketMember: typing.Optional[typing.Text] = ...,
        portfolioName: typing.Optional[typing.Text] = ...,
        tradeNumber: typing.Optional[typing.Text] = ...,
        broker: typing.Optional[typing.Text] = ...,
        yesterday: typing.Optional[builtins.bool] = ...,
        strategyLegs: typing.Optional[ActStrategy_pb2.StrategyComposition] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account",b"account","broker",b"broker","commission",b"commission","decQuantity",b"decQuantity","fee",b"fee","freeForm",b"freeForm","instrument",b"instrument","marketMember",b"marketMember","marketUser",b"marketUser","newIId",b"newIId","oldIId",b"oldIId","portfolioName",b"portfolioName","price",b"price","scaledQuantity",b"scaledQuantity","side",b"side","strategyLegs",b"strategyLegs","tradeKey",b"tradeKey","tradeNumber",b"tradeNumber","yesterday",b"yesterday"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account",b"account","broker",b"broker","commission",b"commission","decQuantity",b"decQuantity","fee",b"fee","freeForm",b"freeForm","instrument",b"instrument","marketMember",b"marketMember","marketUser",b"marketUser","newIId",b"newIId","oldIId",b"oldIId","portfolioName",b"portfolioName","price",b"price","scaledQuantity",b"scaledQuantity","side",b"side","strategyLegs",b"strategyLegs","tradeKey",b"tradeKey","tradeNumber",b"tradeNumber","yesterday",b"yesterday"]) -> None: ...
global___TradeData = TradeData

class Request(google.protobuf.message.Message):
    """Requests are passed from client system and will contain only one of the specific requests
    At the moment we support Add, Update and Delete request messages
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REQUESTTYPE_FIELD_NUMBER: builtins.int
    CLIENTID_FIELD_NUMBER: builtins.int
    TRADEDATA_FIELD_NUMBER: builtins.int
    INSTRUMENTS_FIELD_NUMBER: builtins.int
    PRODUCT_FIELD_NUMBER: builtins.int
    TRADEKEY_FIELD_NUMBER: builtins.int
    PORTFOLIO_FIELD_NUMBER: builtins.int
    IGNOREPRICESTEP_FIELD_NUMBER: builtins.int
    requestType: global___RequestType.ValueType
    clientId: builtins.int
    @property
    def tradeData(self) -> global___TradeData: ...
    @property
    def instruments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """	used for metadata request (trade and ev. leg instruments)"""
        pass
    product: typing.Text
    """	backup for strategies that are not yet created"""

    tradeKey: typing.Text
    """	used to retrieve specific trade"""

    portfolio: typing.Text
    """	used to move trades (possibly should be a structure)"""

    ignorePriceStep: builtins.bool
    """	don't validate the trade price"""

    def __init__(self,
        *,
        requestType: typing.Optional[global___RequestType.ValueType] = ...,
        clientId: typing.Optional[builtins.int] = ...,
        tradeData: typing.Optional[global___TradeData] = ...,
        instruments: typing.Optional[typing.Iterable[typing.Text]] = ...,
        product: typing.Optional[typing.Text] = ...,
        tradeKey: typing.Optional[typing.Text] = ...,
        portfolio: typing.Optional[typing.Text] = ...,
        ignorePriceStep: typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId",b"clientId","ignorePriceStep",b"ignorePriceStep","portfolio",b"portfolio","product",b"product","requestType",b"requestType","tradeData",b"tradeData","tradeKey",b"tradeKey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId",b"clientId","ignorePriceStep",b"ignorePriceStep","instruments",b"instruments","portfolio",b"portfolio","product",b"product","requestType",b"requestType","tradeData",b"tradeData","tradeKey",b"tradeKey"]) -> None: ...
global___Request = Request

class Response(google.protobuf.message.Message):
    """Responses are passed from actant system and will contain only one of the specific responses."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESPONSETYPE_FIELD_NUMBER: builtins.int
    CLIENTID_FIELD_NUMBER: builtins.int
    OPERATIONSTATUS_FIELD_NUMBER: builtins.int
    NEWIID_FIELD_NUMBER: builtins.int
    TRADEDATA_FIELD_NUMBER: builtins.int
    responseType: global___ResponseType.ValueType
    clientId: builtins.int
    @property
    def operationStatus(self) -> ActTypes_pb2.OperationStatus: ...
    newIId: typing.Text
    @property
    def tradeData(self) -> global___TradeData:
        """	requested trade"""
        pass
    def __init__(self,
        *,
        responseType: typing.Optional[global___ResponseType.ValueType] = ...,
        clientId: typing.Optional[builtins.int] = ...,
        operationStatus: typing.Optional[ActTypes_pb2.OperationStatus] = ...,
        newIId: typing.Optional[typing.Text] = ...,
        tradeData: typing.Optional[global___TradeData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId",b"clientId","newIId",b"newIId","operationStatus",b"operationStatus","responseType",b"responseType","tradeData",b"tradeData"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId",b"clientId","newIId",b"newIId","operationStatus",b"operationStatus","responseType",b"responseType","tradeData",b"tradeData"]) -> None: ...
global___Response = Response
